{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\root\\\\Desktop\\\\matcha\\\\client\\\\src\\\\user\\\\SignIn\\\\SignIn.js\";\nimport React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; // import ImageUpload from '../../shared/components/FormElements/ImageUpload';\n\nimport { VALIDATOR_MINLENGTH, VALIDATOR_EMAIL } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nconst SignIn = () => {\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    pseudo: {\n      value: '',\n      isValid: false\n    },\n    address: {\n      value: '',\n      isValid: false\n    },\n    image: {\n      value: null,\n      isValid: false\n    }\n  }, false);\n  const history = useHistory();\n\n  const placeSubmitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      const formData = new FormData();\n      formData.append('email', formState.inputs.email.value);\n      formData.append('pseudo', formState.inputs.pseudo.value);\n      formData.append('password', formState.inputs.password.value); //   formData.append('image', formState.inputs.image.value);\n\n      await sendRequest('http://localhost:5000/api/places', 'POST', formData, {\n        Authorization: 'Bearer ' + auth.token\n      });\n      history.push('/');\n    } catch (err) {}\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeSubmitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, isLoading && React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(Input, {\n    id: \"email\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Email\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid email.\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(Input, {\n    id: \"pseudo\",\n    type: \"text\",\n    element: \"input\",\n    label: \"Pseudo\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid Pseudo (at least 5 characters).\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Input, {\n    id: \"address\",\n    type: \"password\",\n    element: \"input\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH()],\n    errorText: \"Please enter a valid Password (at least 5 characters + numbers).\",\n    onInput: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Sign In\")));\n};\n\nexport default SignIn;","map":{"version":3,"sources":["C:/Users/root/Desktop/matcha/client/src/user/SignIn/SignIn.js"],"names":["React","useContext","useHistory","Input","Button","ErrorModal","LoadingSpinner","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","useForm","useHttpClient","AuthContext","SignIn","auth","isLoading","error","sendRequest","clearError","formState","inputHandler","email","value","isValid","pseudo","address","image","history","placeSubmitHandler","event","preventDefault","formData","FormData","append","inputs","password","Authorization","token","push","err"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\n// import ImageUpload from '../../shared/components/FormElements/ImageUpload';\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_EMAIL\r\n} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\n\r\nconst SignIn = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [formState, inputHandler] = useForm(\r\n    {\r\n      email: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      pseudo: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      address: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      image: {\r\n        value: null,\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  );\r\n\r\n  const history = useHistory();\r\n\r\n  const placeSubmitHandler = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('email', formState.inputs.email.value);\r\n      formData.append('pseudo', formState.inputs.pseudo.value);\r\n      formData.append('password', formState.inputs.password.value);\r\n    //   formData.append('image', formState.inputs.image.value);\r\n      await sendRequest('http://localhost:5000/api/places', 'POST', formData, {\r\n        Authorization: 'Bearer ' + auth.token\r\n      });\r\n      history.push('/');\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <Input\r\n          id=\"email\"\r\n          element=\"input\"\r\n          type=\"text\"\r\n          label=\"Email\"\r\n          validators={[VALIDATOR_EMAIL()]}\r\n          errorText=\"Please enter a valid email.\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"pseudo\"\r\n          type=\"text\"\r\n          element=\"input\"\r\n          label=\"Pseudo\"\r\n          validators={[VALIDATOR_MINLENGTH(5)]}\r\n          errorText=\"Please enter a valid Pseudo (at least 5 characters).\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"address\"\r\n          type=\"password\"\r\n          element=\"input\"\r\n          label=\"Password\"\r\n          validators={[VALIDATOR_MINLENGTH()]}\r\n          errorText=\"Please enter a valid Password (at least 5 characters + numbers).\"\r\n          onInput={inputHandler}\r\n        />\r\n        {/* <ImageUpload\r\n          id=\"image\"\r\n          onInput={inputHandler}\r\n          errorText=\"Please provide an image.\"\r\n        /> */}\r\n        <Button type=\"submit\" disabled={!formState.isValid}>\r\n          Sign In\r\n        </Button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SignIn;"]},"metadata":{},"sourceType":"module"}